import tkinter as tk
import python_array_test as rm
import room_choice as rc
import show_room as sr
import room_dimensions as rd
import room_furniture as rf
import room_doors as ro
import do_designs as do
import launch_gui

class main_gui(tk.Tk):

    base_room = None # the base room on which designs will be built
    room_designs = []  # all the room designs, contains a list of room objects
    room_name = ""
    room_length = 0
    room_width = 0
    active_page = None # the currently shown page
    help_texts = {} # dict for the help popup text
    pages_list = None # the pages of the ui

    def get_room_name(self):
        if self.base_room is None:
            return ''
        else:
            return self.base_room.get_room_name()

    def set_room_name(self, room_name_to_set):
        self.base_room.set_room_name(room_name_to_set)
        print("Room name set to: ", self.get_room_name())

    def get_room_dims(self):
        return self.base_room.get_room_dims()

    def set_room_dims(self, room_length_to_set, room_width_to_set):
        self.base_room.set_room_size(room_width_to_set,room_length_to_set)

    def get_furniture_list(self):
        return self.base_room.get_furniturelist()

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.geometry("600x400")

        # container to hold all the frames in the app
        self.wm_title("Room generator program")
        container = tk.Frame(self, name='container')
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(
            0, weight=1
        )  # make the cell in grid cover the entire window
        container.grid_columnconfigure(
            0, weight=1
        )  # make the cell in grid cover the entire window

        #initialise the base room
        self.base_room = rm.room()
        
        self.help_texts = {
            rc.room_choice: "Select the type of room that you want to design by clicking on the button. \n\nYou cannot progress through the program without choosing a room type.",
            rd.room_dimensions: "Customise the dimensions of your room. \n\nEnter measurements into the height and width fields to choose wall length and width. \n\nYou may only enter whole numbers.",
            rf.room_furniture: "Add doors and windows to your room. \n\nSelect either door or window, then choose a place and add said object to your room. \n\nYou may remove an existing object by selecting it on the diagram and clicking the remove button. \n\nAll objects may only be placed on existing walls.",
            sr.show_room: "These are the designs that have been generated by the program for your room. \n\nClick on the arrows to switch between designs. \n\nIf a design does not include an item of furniture in your list it will also be displayed in the list.",
            ro.room_doors: "Some help", # TODO
            do.do_designs: "some help do the designs" #TODO
        }

        self.pages_list = []
        for F in (rc.room_choice, rd.room_dimensions, ro.room_doors, rf.room_furniture, do.do_designs, sr.show_room):

            my_page = F(container, self)  # create frame
            self.pages_list.append(my_page)           
            self.pages_list[-1].grid(row=0, column=0, sticky="nsew")

        self.show_next_page() #launch with the first page (room choice frame)
        #self.show_page(self.pages_list[4])  # testing

    def show_next_page(self):
        
        if self.active_page is None:
            page_to_show = self.pages_list[0]
        else:
            cur_index = self.pages_list.index(self.active_page) 
            if cur_index < (len(self.pages_list)-1):
                cur_index +=1
            page_to_show = self.pages_list[ cur_index ]

        if page_to_show is not None:
             self.show_page( page_to_show )

    def show_previous_page(self):
        
        if self.pages_list.index( self.active_page ) > 0 :

            page_to_show = self.pages_list[ self.pages_list.index( self.active_page) -1 ]
            self.show_page( page_to_show )

    def show_page(self, page):

        self.active_page = page 
        page.event_generate("<<ShowFrame>>")
        page.tkraise()


    def help_popup(self):
        helpwin = tk.Tk()
        helpwin.wm_title("Help")

        tk.Label(
            helpwin,
            text = (self.help_texts).get(self.active_page.__class__)
        ).pack()
       

if __name__ == "__main__":
    main = main_gui()
    main.mainloop()
